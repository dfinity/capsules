name: CI

on: [push]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:

  test-nightly:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust Nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - name: Install minio
        run: |
          set -eux
          curl -L -o minio https://dl.min.io/server/minio/release/linux-amd64/minio
          chmod +x minio
          pwd >> $GITHUB_PATH
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  clippy-fmt-nightly:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust Nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: clippy, rustfmt
      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  test-stable:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust Stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Install minio
        run: |
          set -eux
          curl -L -o minio https://dl.min.io/server/minio/release/linux-amd64/minio
          chmod +x minio
          pwd >> $GITHUB_PATH
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  clippy-fmt-stable:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust Stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy, rustfmt
      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt

  build-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust Stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Run cargo build --release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Create Release
        id: create_release
        if: ${{ github.ref_type == 'tag' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload capsule binary
        if: ${{ github.ref_type == 'tag' }}
        id: upload-release-asset-capsule
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/capsule
          asset_name: capsule
          asset_content_type: application/octet-stream
      - name: Upload cargo-capsule-test binary
        if: ${{ github.ref_type == 'tag' }}
        id: upload-release-asset-cargo-capsule-test
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/cargo-capsule-test
          asset_name: cargo-capsule-test
          asset_content_type: application/octet-stream
      - name: Upload cargo-capsule-build binary
        if: ${{ github.ref_type == 'tag' }}
        id: upload-release-asset-cargo-capsule-build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/cargo-capsule-build
          asset_name: cargo-capsule-build
          asset_content_type: application/octet-stream
